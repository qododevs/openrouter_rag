import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from langchain_core.prompts import ChatPromptTemplate
from langchain_openai import ChatOpenAI
from langchain.chains import create_retrieval_chain
from langchain.chains.combine_documents import create_stuff_documents_chain
from rag import get_or_create_vectorstore
from db import init_db, get_context, set_context, clear_context
from config import BOT_TOKEN, OPENROUTER_API_KEY, SYSTEM_PROMPT

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç")]],
    resize_keyboard=True,
    one_time_keyboard=False
)

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –≤–∞—à  –±—å—é—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞.",
        reply_markup=keyboard
    )

@dp.message(lambda msg: msg.text == "üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç")
async def clear_ctx(message: types.Message):
    await clear_context(message.chat.id)
    await message.answer("üßπ –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω!", reply_markup=keyboard)

@dp.message()
async def handle_message(message: types.Message):
    if not message.text or not message.text.strip():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.", reply_markup=keyboard)
        return

    user_query = message.text.strip()
    if user_query == "üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç":
        return  # —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ë–î
        chat_context = await get_context(message.chat.id)

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –≤–µ–∫—Ç–æ—Ä–Ω—É—é –ë–î (—Å RAG)
        vectorstore = get_or_create_vectorstore()
        retriever = vectorstore.as_retriever(search_kwargs={"k": 5})

        # LLM —á–µ—Ä–µ–∑ OpenRouter (—Ç–æ–ª—å–∫–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏)
        llm = ChatOpenAI(
            base_url="https://openrouter.ai/api/v1",
            api_key=OPENROUTER_API_KEY,
            model="deepseek/deepseek-chat-v3.1:free",
            temperature=0.3,
            max_tokens=1000
        )

        # ‚ö†Ô∏è –í–ê–ñ–ù–û: –ø—Ä–æ–º—Ç –î–û–õ–ñ–ï–ù —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é {context}
        prompt = ChatPromptTemplate.from_messages([
            ("system", SYSTEM_PROMPT + "\n\n–ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:\n{context}"),
            ("human", "–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å):\n{chat_history}\n\n–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n{input}")
        ])

        # –°–æ–∑–¥–∞—ë–º —Ü–µ–ø–æ—á–∫—É RAG
        combine_docs_chain = create_stuff_documents_chain(llm, prompt)
        retrieval_chain = create_retrieval_chain(retriever, combine_docs_chain)

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        response = await retrieval_chain.ainvoke({
            "input": user_query,
            "chat_history": chat_context
        })

        answer = response["answer"]

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞
        new_context = f"{chat_context}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_query}\n–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {answer}".strip()
        await set_context(message.chat.id, new_context)

        await message.answer(answer, reply_markup=keyboard)

    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=keyboard
        )

async def main():
    await init_db()
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–µ–∫—Ç–æ—Ä–Ω—É—é –ë–î –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    get_or_create_vectorstore()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())